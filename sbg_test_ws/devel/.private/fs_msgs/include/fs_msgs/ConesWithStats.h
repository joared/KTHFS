// Generated by gencpp from file fs_msgs/ConesWithStats.msg
// DO NOT EDIT!


#ifndef FS_MSGS_MESSAGE_CONESWITHSTATS_H
#define FS_MSGS_MESSAGE_CONESWITHSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <fs_msgs/ConeWithStats.h>

namespace fs_msgs
{
template <class ContainerAllocator>
struct ConesWithStats_
{
  typedef ConesWithStats_<ContainerAllocator> Type;

  ConesWithStats_()
    : header()
    , cones()  {
    }
  ConesWithStats_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cones(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::fs_msgs::ConeWithStats_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fs_msgs::ConeWithStats_<ContainerAllocator> >::other >  _cones_type;
  _cones_type cones;





  typedef boost::shared_ptr< ::fs_msgs::ConesWithStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fs_msgs::ConesWithStats_<ContainerAllocator> const> ConstPtr;

}; // struct ConesWithStats_

typedef ::fs_msgs::ConesWithStats_<std::allocator<void> > ConesWithStats;

typedef boost::shared_ptr< ::fs_msgs::ConesWithStats > ConesWithStatsPtr;
typedef boost::shared_ptr< ::fs_msgs::ConesWithStats const> ConesWithStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fs_msgs::ConesWithStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fs_msgs::ConesWithStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fs_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'fs_msgs': ['/home/joar/KTHFS/sbg_test_ws/src/fs_msgs/msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ConesWithStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ConesWithStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ConesWithStats_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6718c9a6b3d40b0468a363f35c8b1688";
  }

  static const char* value(const ::fs_msgs::ConesWithStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6718c9a6b3d40b04ULL;
  static const uint64_t static_value2 = 0x68a363f35c8b1688ULL;
};

template<class ContainerAllocator>
struct DataType< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/ConesWithStats";
  }

  static const char* value(const ::fs_msgs::ConesWithStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Array of cones with statistics\n"
"#\n"
"\n"
"# Extra information on the message\n"
"# header.stamp: time of the message\n"
"# header.frame_id: frame in which the cones are given\n"
"Header header\n"
"\n"
"# Array of cones\n"
"ConeWithStats[] cones\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fs_msgs/ConeWithStats\n"
"#\n"
"# Description of a cone with statistics\n"
"#\n"
"\n"
"Cone cone\n"
"ConeStats stats\n"
"\n"
"================================================================================\n"
"MSG: fs_msgs/Cone\n"
"#\n"
"# Description of a cone\n"
"#\n"
"\n"
"# 2D-position of the cone\n"
"float64 x\n"
"float64 y\n"
"\n"
"# Color of the cone\n"
"uint8 UNDEFINED = 0\n"
"uint8 YELLOW = 1\n"
"uint8 BLUE = 2\n"
"uint8 SMALL_ORANGE = 3\n"
"uint8 BIG_ORANGE = 4\n"
"\n"
"uint8 color\n"
"\n"
"# Covariance on the position [m^2] (2x2 matrix in row-major order)\n"
"float64[4] covariance\n"
"\n"
"# Confidence in the detection\n"
"float64 probability\n"
"\n"
"================================================================================\n"
"MSG: fs_msgs/ConeStats\n"
"#\n"
"# Statistics of a cone\n"
"#\n"
"\n"
"# Number of times the cone has been seen\n"
"int32 nbr_detections\n"
"\n"
"# Color counters\n"
"int32 yellow_counter\n"
"int32 blue_counter\n"
"\n"
"# Average innovation (innovation = mapped position - detected position)\n"
"float32 avg_innovation_x\n"
"float32 avg_innovation_y\n"
"\n"
"# Standard deviation of innovation norms\n"
"float32 std_innovation\n"
;
  }

  static const char* value(const ::fs_msgs::ConesWithStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConesWithStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fs_msgs::ConesWithStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fs_msgs::ConesWithStats_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cones[]" << std::endl;
    for (size_t i = 0; i < v.cones.size(); ++i)
    {
      s << indent << "  cones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fs_msgs::ConeWithStats_<ContainerAllocator> >::stream(s, indent + "    ", v.cones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FS_MSGS_MESSAGE_CONESWITHSTATS_H
