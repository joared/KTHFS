// Generated by gencpp from file fs_msgs/ConeStats.msg
// DO NOT EDIT!


#ifndef FS_MSGS_MESSAGE_CONESTATS_H
#define FS_MSGS_MESSAGE_CONESTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fs_msgs
{
template <class ContainerAllocator>
struct ConeStats_
{
  typedef ConeStats_<ContainerAllocator> Type;

  ConeStats_()
    : nbr_detections(0)
    , yellow_counter(0)
    , blue_counter(0)
    , avg_innovation_x(0.0)
    , avg_innovation_y(0.0)
    , std_innovation(0.0)  {
    }
  ConeStats_(const ContainerAllocator& _alloc)
    : nbr_detections(0)
    , yellow_counter(0)
    , blue_counter(0)
    , avg_innovation_x(0.0)
    , avg_innovation_y(0.0)
    , std_innovation(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _nbr_detections_type;
  _nbr_detections_type nbr_detections;

   typedef int32_t _yellow_counter_type;
  _yellow_counter_type yellow_counter;

   typedef int32_t _blue_counter_type;
  _blue_counter_type blue_counter;

   typedef float _avg_innovation_x_type;
  _avg_innovation_x_type avg_innovation_x;

   typedef float _avg_innovation_y_type;
  _avg_innovation_y_type avg_innovation_y;

   typedef float _std_innovation_type;
  _std_innovation_type std_innovation;





  typedef boost::shared_ptr< ::fs_msgs::ConeStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fs_msgs::ConeStats_<ContainerAllocator> const> ConstPtr;

}; // struct ConeStats_

typedef ::fs_msgs::ConeStats_<std::allocator<void> > ConeStats;

typedef boost::shared_ptr< ::fs_msgs::ConeStats > ConeStatsPtr;
typedef boost::shared_ptr< ::fs_msgs::ConeStats const> ConeStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fs_msgs::ConeStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fs_msgs::ConeStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fs_msgs::ConeStats_<ContainerAllocator1> & lhs, const ::fs_msgs::ConeStats_<ContainerAllocator2> & rhs)
{
  return lhs.nbr_detections == rhs.nbr_detections &&
    lhs.yellow_counter == rhs.yellow_counter &&
    lhs.blue_counter == rhs.blue_counter &&
    lhs.avg_innovation_x == rhs.avg_innovation_x &&
    lhs.avg_innovation_y == rhs.avg_innovation_y &&
    lhs.std_innovation == rhs.std_innovation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fs_msgs::ConeStats_<ContainerAllocator1> & lhs, const ::fs_msgs::ConeStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ConeStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ConeStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ConeStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ConeStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ConeStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ConeStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fs_msgs::ConeStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e29d797ff713ceaa2ace1ff34729c17e";
  }

  static const char* value(const ::fs_msgs::ConeStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe29d797ff713ceaaULL;
  static const uint64_t static_value2 = 0x2ace1ff34729c17eULL;
};

template<class ContainerAllocator>
struct DataType< ::fs_msgs::ConeStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/ConeStats";
  }

  static const char* value(const ::fs_msgs::ConeStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fs_msgs::ConeStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Statistics of a cone\n"
"#\n"
"\n"
"# Number of times the cone has been seen\n"
"int32 nbr_detections\n"
"\n"
"# Color counters\n"
"int32 yellow_counter\n"
"int32 blue_counter\n"
"\n"
"# Average innovation (innovation = mapped position - detected position)\n"
"float32 avg_innovation_x\n"
"float32 avg_innovation_y\n"
"\n"
"# Standard deviation of innovation norms\n"
"float32 std_innovation\n"
;
  }

  static const char* value(const ::fs_msgs::ConeStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fs_msgs::ConeStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nbr_detections);
      stream.next(m.yellow_counter);
      stream.next(m.blue_counter);
      stream.next(m.avg_innovation_x);
      stream.next(m.avg_innovation_y);
      stream.next(m.std_innovation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fs_msgs::ConeStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fs_msgs::ConeStats_<ContainerAllocator>& v)
  {
    s << indent << "nbr_detections: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nbr_detections);
    s << indent << "yellow_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yellow_counter);
    s << indent << "blue_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blue_counter);
    s << indent << "avg_innovation_x: ";
    Printer<float>::stream(s, indent + "  ", v.avg_innovation_x);
    s << indent << "avg_innovation_y: ";
    Printer<float>::stream(s, indent + "  ", v.avg_innovation_y);
    s << indent << "std_innovation: ";
    Printer<float>::stream(s, indent + "  ", v.std_innovation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FS_MSGS_MESSAGE_CONESTATS_H
