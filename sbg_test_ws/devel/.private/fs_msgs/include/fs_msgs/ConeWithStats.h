// Generated by gencpp from file fs_msgs/ConeWithStats.msg
// DO NOT EDIT!


#ifndef FS_MSGS_MESSAGE_CONEWITHSTATS_H
#define FS_MSGS_MESSAGE_CONEWITHSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fs_msgs/Cone.h>
#include <fs_msgs/ConeStats.h>

namespace fs_msgs
{
template <class ContainerAllocator>
struct ConeWithStats_
{
  typedef ConeWithStats_<ContainerAllocator> Type;

  ConeWithStats_()
    : cone()
    , stats()  {
    }
  ConeWithStats_(const ContainerAllocator& _alloc)
    : cone(_alloc)
    , stats(_alloc)  {
  (void)_alloc;
    }



   typedef  ::fs_msgs::Cone_<ContainerAllocator>  _cone_type;
  _cone_type cone;

   typedef  ::fs_msgs::ConeStats_<ContainerAllocator>  _stats_type;
  _stats_type stats;





  typedef boost::shared_ptr< ::fs_msgs::ConeWithStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fs_msgs::ConeWithStats_<ContainerAllocator> const> ConstPtr;

}; // struct ConeWithStats_

typedef ::fs_msgs::ConeWithStats_<std::allocator<void> > ConeWithStats;

typedef boost::shared_ptr< ::fs_msgs::ConeWithStats > ConeWithStatsPtr;
typedef boost::shared_ptr< ::fs_msgs::ConeWithStats const> ConeWithStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fs_msgs::ConeWithStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fs_msgs::ConeWithStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fs_msgs::ConeWithStats_<ContainerAllocator1> & lhs, const ::fs_msgs::ConeWithStats_<ContainerAllocator2> & rhs)
{
  return lhs.cone == rhs.cone &&
    lhs.stats == rhs.stats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fs_msgs::ConeWithStats_<ContainerAllocator1> & lhs, const ::fs_msgs::ConeWithStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ConeWithStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ConeWithStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ConeWithStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc6abd39812a69dee6e5d6c6dbebf194";
  }

  static const char* value(const ::fs_msgs::ConeWithStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc6abd39812a69deULL;
  static const uint64_t static_value2 = 0xe6e5d6c6dbebf194ULL;
};

template<class ContainerAllocator>
struct DataType< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/ConeWithStats";
  }

  static const char* value(const ::fs_msgs::ConeWithStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Description of a cone with statistics\n"
"#\n"
"\n"
"Cone cone\n"
"ConeStats stats\n"
"\n"
"================================================================================\n"
"MSG: fs_msgs/Cone\n"
"#\n"
"# Description of a cone\n"
"#\n"
"\n"
"# 2D-position of the cone\n"
"float64 x\n"
"float64 y\n"
"\n"
"# Color of the cone\n"
"uint8 UNDEFINED = 0\n"
"uint8 YELLOW = 1\n"
"uint8 BLUE = 2\n"
"uint8 SMALL_ORANGE = 3\n"
"uint8 BIG_ORANGE = 4\n"
"\n"
"uint8 color\n"
"\n"
"# Covariance on the position [m^2] (2x2 matrix in row-major order)\n"
"float64[4] covariance\n"
"\n"
"# Confidence in the detection\n"
"float64 probability\n"
"\n"
"================================================================================\n"
"MSG: fs_msgs/ConeStats\n"
"#\n"
"# Statistics of a cone\n"
"#\n"
"\n"
"# Number of times the cone has been seen\n"
"int32 nbr_detections\n"
"\n"
"# Color counters\n"
"int32 yellow_counter\n"
"int32 blue_counter\n"
"\n"
"# Average innovation (innovation = mapped position - detected position)\n"
"float32 avg_innovation_x\n"
"float32 avg_innovation_y\n"
"\n"
"# Standard deviation of innovation norms\n"
"float32 std_innovation\n"
;
  }

  static const char* value(const ::fs_msgs::ConeWithStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cone);
      stream.next(m.stats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeWithStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fs_msgs::ConeWithStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fs_msgs::ConeWithStats_<ContainerAllocator>& v)
  {
    s << indent << "cone: ";
    s << std::endl;
    Printer< ::fs_msgs::Cone_<ContainerAllocator> >::stream(s, indent + "  ", v.cone);
    s << indent << "stats: ";
    s << std::endl;
    Printer< ::fs_msgs::ConeStats_<ContainerAllocator> >::stream(s, indent + "  ", v.stats);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FS_MSGS_MESSAGE_CONEWITHSTATS_H
