# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fs_msgs/ConeWithStats.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fs_msgs.msg

class ConeWithStats(genpy.Message):
  _md5sum = "bc6abd39812a69dee6e5d6c6dbebf194"
  _type = "fs_msgs/ConeWithStats"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
# Description of a cone with statistics
#

Cone cone
ConeStats stats

================================================================================
MSG: fs_msgs/Cone
#
# Description of a cone
#

# 2D-position of the cone
float64 x
float64 y

# Color of the cone
uint8 UNDEFINED = 0
uint8 YELLOW = 1
uint8 BLUE = 2
uint8 SMALL_ORANGE = 3
uint8 BIG_ORANGE = 4

uint8 color

# Covariance on the position [m^2] (2x2 matrix in row-major order)
float64[4] covariance

# Confidence in the detection
float64 probability

================================================================================
MSG: fs_msgs/ConeStats
#
# Statistics of a cone
#

# Number of times the cone has been seen
int32 nbr_detections

# Color counters
int32 yellow_counter
int32 blue_counter

# Average innovation (innovation = mapped position - detected position)
float32 avg_innovation_x
float32 avg_innovation_y

# Standard deviation of innovation norms
float32 std_innovation
"""
  __slots__ = ['cone','stats']
  _slot_types = ['fs_msgs/Cone','fs_msgs/ConeStats']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cone,stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConeWithStats, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cone is None:
        self.cone = fs_msgs.msg.Cone()
      if self.stats is None:
        self.stats = fs_msgs.msg.ConeStats()
    else:
      self.cone = fs_msgs.msg.Cone()
      self.stats = fs_msgs.msg.ConeStats()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2dB().pack(_x.cone.x, _x.cone.y, _x.cone.color))
      buff.write(_get_struct_4d().pack(*self.cone.covariance))
      _x = self
      buff.write(_get_struct_d3i3f().pack(_x.cone.probability, _x.stats.nbr_detections, _x.stats.yellow_counter, _x.stats.blue_counter, _x.stats.avg_innovation_x, _x.stats.avg_innovation_y, _x.stats.std_innovation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cone is None:
        self.cone = fs_msgs.msg.Cone()
      if self.stats is None:
        self.stats = fs_msgs.msg.ConeStats()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.cone.x, _x.cone.y, _x.cone.color,) = _get_struct_2dB().unpack(str[start:end])
      start = end
      end += 32
      self.cone.covariance = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.cone.probability, _x.stats.nbr_detections, _x.stats.yellow_counter, _x.stats.blue_counter, _x.stats.avg_innovation_x, _x.stats.avg_innovation_y, _x.stats.std_innovation,) = _get_struct_d3i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2dB().pack(_x.cone.x, _x.cone.y, _x.cone.color))
      buff.write(self.cone.covariance.tostring())
      _x = self
      buff.write(_get_struct_d3i3f().pack(_x.cone.probability, _x.stats.nbr_detections, _x.stats.yellow_counter, _x.stats.blue_counter, _x.stats.avg_innovation_x, _x.stats.avg_innovation_y, _x.stats.std_innovation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cone is None:
        self.cone = fs_msgs.msg.Cone()
      if self.stats is None:
        self.stats = fs_msgs.msg.ConeStats()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.cone.x, _x.cone.y, _x.cone.color,) = _get_struct_2dB().unpack(str[start:end])
      start = end
      end += 32
      self.cone.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 32
      (_x.cone.probability, _x.stats.nbr_detections, _x.stats.yellow_counter, _x.stats.blue_counter, _x.stats.avg_innovation_x, _x.stats.avg_innovation_y, _x.stats.std_innovation,) = _get_struct_d3i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d3i3f = None
def _get_struct_d3i3f():
    global _struct_d3i3f
    if _struct_d3i3f is None:
        _struct_d3i3f = struct.Struct("<d3i3f")
    return _struct_d3i3f
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
