# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fs_msgs/ConeStats.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConeStats(genpy.Message):
  _md5sum = "e29d797ff713ceaa2ace1ff34729c17e"
  _type = "fs_msgs/ConeStats"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
# Statistics of a cone
#

# Number of times the cone has been seen
int32 nbr_detections

# Color counters
int32 yellow_counter
int32 blue_counter

# Average innovation (innovation = mapped position - detected position)
float32 avg_innovation_x
float32 avg_innovation_y

# Standard deviation of innovation norms
float32 std_innovation
"""
  __slots__ = ['nbr_detections','yellow_counter','blue_counter','avg_innovation_x','avg_innovation_y','std_innovation']
  _slot_types = ['int32','int32','int32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nbr_detections,yellow_counter,blue_counter,avg_innovation_x,avg_innovation_y,std_innovation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConeStats, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nbr_detections is None:
        self.nbr_detections = 0
      if self.yellow_counter is None:
        self.yellow_counter = 0
      if self.blue_counter is None:
        self.blue_counter = 0
      if self.avg_innovation_x is None:
        self.avg_innovation_x = 0.
      if self.avg_innovation_y is None:
        self.avg_innovation_y = 0.
      if self.std_innovation is None:
        self.std_innovation = 0.
    else:
      self.nbr_detections = 0
      self.yellow_counter = 0
      self.blue_counter = 0
      self.avg_innovation_x = 0.
      self.avg_innovation_y = 0.
      self.std_innovation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i3f().pack(_x.nbr_detections, _x.yellow_counter, _x.blue_counter, _x.avg_innovation_x, _x.avg_innovation_y, _x.std_innovation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.nbr_detections, _x.yellow_counter, _x.blue_counter, _x.avg_innovation_x, _x.avg_innovation_y, _x.std_innovation,) = _get_struct_3i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i3f().pack(_x.nbr_detections, _x.yellow_counter, _x.blue_counter, _x.avg_innovation_x, _x.avg_innovation_y, _x.std_innovation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.nbr_detections, _x.yellow_counter, _x.blue_counter, _x.avg_innovation_x, _x.avg_innovation_y, _x.std_innovation,) = _get_struct_3i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i3f = None
def _get_struct_3i3f():
    global _struct_3i3f
    if _struct_3i3f is None:
        _struct_3i3f = struct.Struct("<3i3f")
    return _struct_3i3f
